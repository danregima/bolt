#!/usr/bin/env node
'use strict';

// Simple test to see if our web command works
var path = require('path');

// Mock the dependencies that would normally be built
var mockLogger = {
  info: console.log,
  title: function(version, nodeVersion, options) {
    console.log('‚ö°Ô∏è Bolt ' + version + ' (Node ' + nodeVersion + ')');
  }
};

var mockErrors = {
  BoltError: function(message) {
    this.message = message;
    this.name = 'BoltError';
    return this;
  }
};

// Simple web command implementation
function toWebOptions(args, flags) {
  return {
    port: 3000
  };
}

function startWebServer(cwd, port) {
  return new Promise(function(resolve, reject) {
    var http = require('http');
    var url = require('url');
    
    var server = http.createServer(function(req, res) {
      var parsedUrl = url.parse(req.url, true);
      var pathname = parsedUrl.pathname;
      
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
      res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
      
      if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
      }
      
      if (pathname === '/') {
        res.writeHead(200, { 'Content-Type': 'text/html' });
        res.end(getIndexHtml());
      } else if (pathname === '/api/chat' && req.method === 'POST') {
        var body = '';
        req.on('data', function(chunk) {
          body += chunk;
        });
        req.on('end', function() {
          try {
            var data = JSON.parse(body);
            var message = data.message;
            
            var responses = [
              "I'll help you create that! Let me generate the code for you.",
              "Great idea! I'll build a React component with that functionality.",
              "I'll create a new file with the requested features."
            ];
            
            var response = responses[Math.floor(Math.random() * responses.length)];
            
            setTimeout(function() {
              res.writeHead(200, { 'Content-Type': 'application/json' });
              res.end(JSON.stringify({
                response: response,
                files: generateMockFiles(message)
              }));
            }, 1000);
          } catch (err) {
            res.writeHead(400, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: 'Invalid JSON' }));
          }
        });
      } else {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        res.end('Not Found');
      }
    });
    
    server.listen(port, function(err) {
      if (err) {
        reject(err);
      } else {
        console.log('üöÄ Bolt.new web interface running at http://localhost:' + port);
        console.log('üí° This is a demo implementation inspired by bolt.new');
        resolve();
      }
    });
    
    process.on('SIGINT', function() {
      console.log('\nüõë Shutting down web server...');
      server.close(function() {
        process.exit(0);
      });
    });
  });
}

function generateMockFiles(message) {
  if (message.toLowerCase().includes('react')) {
    return {
      'App.js': "import React from 'react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Hello from React!</h1>\n      <p>Generated based on: \"" + message + "\"</p>\n    </div>\n  );\n}\n\nexport default App;",
      'package.json': '{\n  "name": "my-react-app",\n  "version": "1.0.0",\n  "dependencies": {\n    "react": "^18.2.0",\n    "react-dom": "^18.2.0"\n  }\n}'
    };
  }
  
  return {
    'index.html': '<!DOCTYPE html>\n<html>\n<head>\n  <title>Generated Project</title>\n</head>\n<body>\n  <h1>Project based on: "' + message + '"</h1>\n  <p>This is a demo file generated by Bolt.new example.</p>\n</body>\n</html>'
  };
}

function getIndexHtml() {
  return '<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Bolt.new - AI-Powered Development</title>\n    <style>\n        * { margin: 0; padding: 0; box-sizing: border-box; }\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            height: 100vh;\n            display: flex;\n            flex-direction: column;\n        }\n        .header {\n            background: rgba(255, 255, 255, 0.1);\n            backdrop-filter: blur(10px);\n            padding: 1rem;\n            border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n        }\n        .header h1 { color: white; font-size: 1.5rem; font-weight: 600; }\n        .header p { color: rgba(255, 255, 255, 0.8); margin-top: 0.25rem; }\n        .container { display: flex; flex: 1; overflow: hidden; }\n        .chat-panel {\n            width: 40%; background: white; display: flex; flex-direction: column;\n            border-right: 1px solid #e5e7eb;\n        }\n        .editor-panel { width: 60%; background: #1e1e1e; display: flex; flex-direction: column; }\n        .chat-messages { flex: 1; padding: 1rem; overflow-y: auto; }\n        .message { margin-bottom: 1rem; padding: 0.75rem; border-radius: 0.5rem; }\n        .message.user { background: #f3f4f6; margin-left: 2rem; }\n        .message.ai { background: #dbeafe; margin-right: 2rem; }\n        .chat-input { padding: 1rem; border-top: 1px solid #e5e7eb; }\n        .chat-input textarea {\n            width: 100%; padding: 0.75rem; border: 1px solid #d1d5db;\n            border-radius: 0.375rem; resize: vertical; min-height: 60px;\n        }\n        .chat-input button {\n            margin-top: 0.5rem; background: #3b82f6; color: white; border: none;\n            padding: 0.75rem 1.5rem; border-radius: 0.375rem; cursor: pointer;\n        }\n        .chat-input button:hover { background: #2563eb; }\n        .chat-input button:disabled { background: #9ca3af; cursor: not-allowed; }\n        .editor-header {\n            background: #2d2d2d; color: white; padding: 0.75rem;\n            border-bottom: 1px solid #404040;\n        }\n        .file-tabs { display: flex; gap: 0.5rem; }\n        .file-tab {\n            background: #404040; color: white; padding: 0.5rem 1rem;\n            border-radius: 0.25rem 0.25rem 0 0; cursor: pointer; border: none;\n        }\n        .file-tab.active { background: #1e1e1e; }\n        .editor-content {\n            flex: 1; background: #1e1e1e; color: #d4d4d4;\n            font-family: \'Monaco\', \'Menlo\', monospace; font-size: 14px;\n        }\n        .editor-textarea {\n            width: 100%; height: 100%; background: transparent; color: inherit;\n            border: none; padding: 1rem; font-family: inherit; font-size: inherit;\n            resize: none; outline: none;\n        }\n        .loading { display: none; color: #6b7280; font-style: italic; }\n        .loading.show { display: block; }\n    </style>\n</head>\n<body>\n    <div class="header">\n        <h1>‚ö° Bolt.new Example</h1>\n        <p>AI-powered web development environment (Demo implementation)</p>\n    </div>\n    <div class="container">\n        <div class="chat-panel">\n            <div class="chat-messages" id="chatMessages">\n                <div class="message ai">\n                    <strong>Bolt AI:</strong> Hello! I\'m a demo version of an AI assistant. Tell me what you\'d like to build and I\'ll generate some example code for you!\n                </div>\n            </div>\n            <div class="chat-input">\n                <textarea id="messageInput" placeholder="Describe what you want to build..."></textarea>\n                <button onclick="sendMessage()" id="sendButton">Send Message</button>\n                <div class="loading" id="loading">AI is thinking...</div>\n            </div>\n        </div>\n        <div class="editor-panel">\n            <div class="editor-header">\n                <div class="file-tabs" id="fileTabs">\n                    <button class="file-tab active" onclick="showFile(\'welcome\')">README.md</button>\n                </div>\n            </div>\n            <div class="editor-content">\n                <textarea class="editor-textarea" id="fileContent"># Welcome to Bolt.new Example\n\nThis is a demo implementation inspired by bolt.new.\n\n## Features\n- Chat with AI to describe your project\n- View generated files in the editor\n- See a live preview of your project\n\n## How to use\n1. Type a message in the chat describing what you want to build\n2. The AI will generate example code\n3. View and edit the files in this editor\n\nTry asking for:\n- "Create a React todo app"\n- "Build a simple landing page"\n- "Make a JavaScript calculator"\n\n**Note:** This is a demo with simulated AI responses.</textarea>\n            </div>\n        </div>\n    </div>\n    <script>\n        let currentFile = \'welcome\';\n        let files = {\n            \'welcome\': \'# Welcome to Bolt.new Example\\n\\nThis is a demo implementation inspired by bolt.new.\\n\\n## Features\\n- Chat with AI to describe your project\\n- View generated files in the editor\\n- See a live preview of your project\\n\\n## How to use\\n1. Type a message in the chat describing what you want to build\\n2. The AI will generate example code\\n3. View and edit the files in this editor\\n\\nTry asking for:\\n- "Create a React todo app"\\n- "Build a simple landing page"\\n- "Make a JavaScript calculator"\\n\\n**Note:** This is a demo with simulated AI responses.\'\n        };\n        async function sendMessage() {\n            const input = document.getElementById(\'messageInput\');\n            const message = input.value.trim();\n            if (!message) return;\n            const sendButton = document.getElementById(\'sendButton\');\n            const loading = document.getElementById(\'loading\');\n            sendButton.disabled = true;\n            loading.classList.add(\'show\');\n            addMessage(message, \'user\');\n            input.value = \'\';\n            try {\n                const response = await fetch(\'/api/chat\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ message, projectId: \'demo\' })\n                });\n                const data = await response.json();\n                addMessage(data.response, \'ai\');\n                if (data.files) { updateFiles(data.files); }\n            } catch (error) {\n                addMessage(\'Sorry, there was an error processing your request.\', \'ai\');\n            } finally {\n                sendButton.disabled = false;\n                loading.classList.remove(\'show\');\n            }\n        }\n        function addMessage(content, type) {\n            const messagesDiv = document.getElementById(\'chatMessages\');\n            const messageDiv = document.createElement(\'div\');\n            messageDiv.className = \'message \' + type;\n            messageDiv.innerHTML = \'<strong>\' + (type === \'user\' ? \'You\' : \'Bolt AI\') + \':</strong> \' + content;\n            messagesDiv.appendChild(messageDiv);\n            messagesDiv.scrollTop = messagesDiv.scrollHeight;\n        }\n        function updateFiles(newFiles) {\n            Object.assign(files, newFiles);\n            updateFileTabs();\n            if (Object.keys(newFiles).length > 0) {\n                const firstNewFile = Object.keys(newFiles)[0];\n                showFile(firstNewFile);\n            }\n        }\n        function updateFileTabs() {\n            const tabsDiv = document.getElementById(\'fileTabs\');\n            tabsDiv.innerHTML = \'\';\n            Object.keys(files).forEach(filename => {\n                const button = document.createElement(\'button\');\n                button.className = \'file-tab \' + (currentFile === filename ? \'active\' : \'\');\n                button.textContent = filename;\n                button.onclick = () => showFile(filename);\n                tabsDiv.appendChild(button);\n            });\n        }\n        function showFile(filename) {\n            currentFile = filename;\n            document.getElementById(\'fileContent\').value = files[filename] || \'\';\n            updateFileTabs();\n        }\n        document.getElementById(\'messageInput\').addEventListener(\'keydown\', function(e) {\n            if (e.key === \'Enter\' && !e.shiftKey) {\n                e.preventDefault();\n                sendMessage();\n            }\n        });\n        document.getElementById(\'fileContent\').addEventListener(\'input\', function(e) {\n            files[currentFile] = e.target.value;\n        });\n    </script>\n</body>\n</html>';\n}\n\nasync function web(opts) {\n  var cwd = opts.cwd || process.cwd();\n  var port = opts.port || 3000;\n\n  try {\n    mockLogger.info('Starting Bolt.new web interface...');\n    mockLogger.info('Server will be available at http://localhost:' + port);\n    \n    await startWebServer(cwd, port);\n  } catch (err) {\n    throw new mockErrors.BoltError('Unable to start web server: ' + err.message);\n  }\n}\n\n// Parse command line arguments\nvar args = process.argv.slice(2);\nvar command = args[0];\n\nif (command === 'web') {\n  console.log('‚ö°Ô∏è Bolt 0.24.10 (Node ' + process.version + ')');\n  var opts = toWebOptions(args.slice(1), {});\n  web(opts).catch(function(err) {\n    console.error('Error:', err.message);\n    process.exit(1);\n  });\n} else {\n  console.log('‚ö°Ô∏è Bolt.new Example');\n  console.log('');\n  console.log('Usage: node bolt-web.js web');\n  console.log('');\n  console.log('This is a demo implementation inspired by bolt.new.');\n  console.log('It adds a web interface to the existing bolt package manager.');\n  console.log('');\n  console.log('Commands:');\n  console.log('  web    Start the web interface on port 3000');\n  console.log('');\n  console.log('For the full bolt package manager, install dependencies and run:');\n  console.log('  npm install && npm run build && ./bin.js');\n}